#!/usr/bin/env python3
"""
Helper script to generate YouTube cookies for authentication.

This script helps you create a cookies.txt file that can be used with yt-dlp
to bypass age restrictions and access restricted content.

Usage:
    python -m yt_search_dl.generate_cookies --output cookies.txt

Requirements:
    - browser-cookie3 (pip install browser-cookie3)
    - or manually export cookies from your browser
"""

import argparse
import logging
import sys
from pathlib import Path

def generate_cookies_from_browser(output_file: Path) -> bool:
    """Generate cookies from browser using browser-cookie3."""
    try:
        import browser_cookie3  # type: ignore[import-untyped]
    except ImportError:
        logging.error("browser-cookie3 not installed. Install with: pip install browser-cookie3")
        return False
    
    try:
        # Try different browsers
        cookies = None
        for browser_func in [browser_cookie3.chrome, browser_cookie3.firefox, browser_cookie3.edge]:
            try:
                cookies = browser_func(domain_name='.youtube.com')
                logging.info(f"Found cookies from {browser_func.__name__}")
                break
            except Exception:
                continue
        
        if not cookies:
            logging.error("No YouTube cookies found in any browser")
            return False
        
        # Write cookies in Netscape format
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file is generated by generate_cookies.py\n")
            f.write("# https://curl.se/rfc/cookie_spec.html\n")
            f.write("# This is a generated file!  Do not edit.\n\n")
            
            for cookie in cookies:
                if cookie.domain.startswith('.'):
                    domain = cookie.domain[1:]  # Remove leading dot
                else:
                    domain = cookie.domain
                
                # Netscape format: domain, domain_specified, path, secure, expiry, name, value
                secure = "TRUE" if cookie.secure else "FALSE"
                domain_specified = "TRUE" if cookie.domain.startswith('.') else "FALSE"
                
                f.write(f"{domain}\t{domain_specified}\t{cookie.path}\t{secure}\t{cookie.expires}\t{cookie.name}\t{cookie.value}\n")
        
        logging.info(f"Successfully wrote {len(list(cookies))} cookies to {output_file}")
        return True
        
    except Exception as e:
        logging.error(f"Failed to generate cookies: {e}")
        return False

def create_manual_cookies_template(output_file: Path) -> bool:
    """Create a template file for manual cookie entry."""
    template = """# Netscape HTTP Cookie File
# This file is generated by generate_cookies.py
# https://curl.se/rfc/cookie_spec.html
# This is a generated file!  Do not edit.

# To manually add cookies:
# 1. Go to YouTube in your browser
# 2. Open Developer Tools (F12)
# 3. Go to Application/Storage > Cookies > https://www.youtube.com
# 4. Copy the important cookies (especially CONSENT, VISITOR_INFO1_LIVE, LOGIN_INFO, etc.)
# 5. Add them in the format below:
# domain	domain_specified	path	secure	expiry	name	value

# Example:
# youtube.com	TRUE	/	TRUE	1735689600	CONSENT	YES+cb.20231231-07-p0.en+FX+410

"""
    
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(template)
        logging.info(f"Created manual cookies template at {output_file}")
        logging.info("Please edit the file and add your YouTube cookies manually")
        return True
    except Exception as e:
        logging.error(f"Failed to create template: {e}")
        return False

def main():
    parser = argparse.ArgumentParser(
        description="Generate YouTube cookies for authentication",
        epilog="""
Examples:
  # Generate cookies from browser automatically
  python -m yt_search_dl.generate_cookies --output cookies.txt
  
  # Create manual template
  python -m yt_search_dl.generate_cookies --output cookies.txt --manual
  
  # Use with yt-dlp
  python main.py --input songs.txt --cookies-file cookies.txt
        """
    )
    parser.add_argument(
        "--output",
        default="cookies.txt",
        help="Output file for cookies (default: cookies.txt)"
    )
    parser.add_argument(
        "--manual",
        action="store_true",
        help="Create manual template instead of extracting from browser"
    )
    parser.add_argument(
        "--log-level",
        default="INFO",
        choices=["DEBUG", "INFO", "WARNING", "ERROR"],
        help="Log level"
    )
    
    args = parser.parse_args()
    
    # Setup logging
    logging.basicConfig(
        level=getattr(logging, args.log_level),
        format='%(asctime)s - %(levelname)s - %(message)s'
    )
    
    output_file = Path(args.output)
    
    if args.manual:
        success = create_manual_cookies_template(output_file)
    else:
        success = generate_cookies_from_browser(output_file)
    
    if success:
        print(f"\nCookies file created: {output_file}")
        print("You can now use this file with the --cookies-file option:")
        print(f"python main.py --input songs.txt --cookies-file {output_file}")
        return 0
    else:
        print("\nFailed to create cookies file.")
        print("Try using --manual to create a template for manual editing.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
